mints:
  # ascending order
  # same priority <=> same category
  priority: 0
  # $m: member name
  # $mb<idx>b: member name of requirement type <idx>
  default_content:
    requirements: null
    include:
    - include/math/mint.hpp
    - include/math/mint_$m.hpp
    after_include: |
      using namespace tifa_libs;
      using mint = math::mint<math::mint_$m, MOD>;
    main_begin: null
  member:
    s30: null
    s63: null
mintd:
  priority: 0
  default_content:
    requirements: null
    include:
    - include/math/mint.hpp
    - include/math/mint_$m.hpp
    after_include: |
      using namespace tifa_libs;
      using mint = math::mint<math::mint_$m, __LINE__>;
    main_begin: |
      mint::set_mod(MOD);
  member:
    d31: null
    d63: null
hash:
  priority: 100
  default_content:
    requirements: null
    include: null
    after_include: |
      using namespace tifa_libs;
      template <class>
      using hashfunc_t = void;
    main_begin: null
  member:
    default: null
    chash:
      after_include: |
        using namespace tifa_libs;
        template <class T>
        using hashfunc_t = chash<T>;
    splitmix64:
      include:
      - include/edh/hash_splitmix64.hpp
      after_include: |
        using namespace tifa_libs;
        template <class>
        using hashfunc_t = hash_splitmix64;
hashset:
  priority: 200
  default_content:
    requirements:
    - [hash]
    include: null
    after_include: null
    main_begin: null
  member:
    std_hset:
      after_include: |
        using namespace tifa_libs;
        template <class T>
        using hashset = std::unordered_set<T, std::conditional_t<std::is_void_v<hashfunc_t<T>>, std::hash<T>, hashfunc_t<T>>>;
    pbds_cc_hset:
      after_include: |
        using namespace tifa_libs;
        template <class T>
        using hashset = __gnu_pbds::cc_hash_table<T, __gnu_pbds::null_type, std::conditional_t<std::is_void_v<hashfunc_t<T>>, typename __gnu_pbds::detail::default_hash_fn<T>::type, hashfunc_t<T>>>;
    pbds_gp_hset:
      after_include: |
        using namespace tifa_libs;
        template <class T>
        using hashset = __gnu_pbds::gp_hash_table<T, __gnu_pbds::null_type, std::conditional_t<std::is_void_v<hashfunc_t<T>>, typename __gnu_pbds::detail::default_hash_fn<T>::type, hashfunc_t<T>>>;
hashmap:
  priority: 300
  default_content:
    requirements:
    - [hash]
    include: null
    after_include: null
    main_begin: null
  member:
    std_hmap:
      after_include: |
        using namespace tifa_libs;
        template <class K, class V>
        using hashmap = std::unordered_map<K, V, std::conditional_t<std::is_void_v<hashfunc_t<K>>, std::hash<K>, hashfunc_t<K>>>;
    pbds_cc_hmap:
      after_include: |
        using namespace tifa_libs;
        template <class K, class V>
        using hashmap = __gnu_pbds::cc_hash_table<K, V, std::conditional_t<std::is_void_v<hashfunc_t<K>>, typename __gnu_pbds::detail::default_hash_fn<K>::type, hashfunc_t<K>>>;
    pbds_gp_hmap:
      after_include: |
        using namespace tifa_libs;
        template <class K, class V>
        using hashmap = __gnu_pbds::gp_hash_table<K, V, std::conditional_t<std::is_void_v<hashfunc_t<K>>, typename __gnu_pbds::detail::default_hash_fn<K>::type, hashfunc_t<K>>>;
hashstr:
  priority: 400
  default_content:
    requirements: null
    include: null
    after_include: null
    main_begin: null
  member:
    hashstr1:
      include:
      - include/math/mint.hpp
      - include/math/mint_2e61n1.hpp
      - include/str/hash_substr.hpp
      after_include: |
        using namespace tifa_libs;
        using mint = math::mint<math::mint_2e61n1>;
        using hashstr = str::hash_substr<mint>;
    hashstr2s:
      requirements:
      - [mints]
      include:
      - include/str/hash_substr2.hpp
      after_include: |
        using namespace tifa_libs;
        using mint0 = math::mint<math::mint_$mb0b, 998244353>;
        using mint1 = math::mint<math::mint_$mb0b, 1000000007>;
        using hashstr = str::hash_substr2<mint0, mint1>;
    hashstr2d:
      requirements:
      - [mintd]
      include:
      - include/str/hash_substr2.hpp
      after_include: |
        using namespace tifa_libs;
        using mint0 = math::mint<math::mint_$mb0b, __LINE__>;
        using mint1 = math::mint<math::mint_$mb0b, __LINE__>;
        using hashstr = str::hash_substr2<mint0, mint1>;
      main_begin: |
        mint0::set_mod(998244353);
        mint1::set_mod(1000000007);
poly_anymod:
  priority: 500
  default_content:
    requirements: null
    include: null
    after_include: null
    main_begin: null
  member:
    p3ntt:
      requirements:
      - [mints, mintd]
      - [mints] # `after_include` and `main_begin` will be ignored
      include:
      - include/poly/poly3ntt.hpp
      after_include: |
        using namespace tifa_libs;
        using mint_$m1 = math::mint<math::mint_$mb1b, 167772161>;
        using mint_$m2 = math::mint<math::mint_$mb1b, 469762049>;
        using mint_$m3 = math::mint<math::mint_$mb1b, 754974721>;
        using poly = math::poly3ntt<mint, mint_$m1, mint_$m2, mint_$m3>;
    pmtt:
      requirements:
      - [mints, mintd]
      include:
      - include/poly/polymtt.hpp
      after_include: |
        using namespace tifa_libs;
        using poly = math::polymtt<mint>;
poly_nttmod:
  priority: 500
  default_content:
    requirements: null
    include: null
    after_include: null
    main_begin: null
  member:
    pntt:
      requirements:
      - [mints]
      include:
      - include/poly/polyntt.hpp
      after_include: |
        using namespace tifa_libs;
        using poly = math::polyntt<mint>;
conv_anymod:
  priority: 600
  default_content:
    requirements: null
    include: null
    after_include: null
    main_begin: null
  member:
    3nttu64:
      requirements:
      - [mints]
      include:
      - include/conv/conv_3ntt.hpp
      after_include: |
        using namespace tifa_libs;
        using mint_$m0 = math::mint<math::mint_$mb0b, 167772161>;
        using mint_$m1 = math::mint<math::mint_$mb0b, 469762049>;
        using mint_$m2 = math::mint<math::mint_$mb0b, 754974721>;
        using ntt_$m0_t = math::ntt<mint_$m0>;
        using ntt_$m1_t = math::ntt<mint_$m1>;
        using ntt_$m2_t = math::ntt<mint_$m2>;
        using vec_t = vecuu;
        auto conv_func(vec_t CR a, vec_t CR b) {
          ntt_$m0_t ntt0;
          ntt_$m1_t ntt1;
          ntt_$m2_t ntt2;
          return math::conv_3ntt_u64(ntt0, ntt1, ntt2, a, b, MOD);
        }
    3ntt:
      requirements:
      - [mints, mintd]
      - [mints] # `after_include` and `main_begin` will be ignored
      include:
      - include/conv/conv_3ntt.hpp
      after_include: |
        using namespace tifa_libs;
        using mint_$m0 = math::mint<math::mint_$mb1b, 167772161>;
        using mint_$m1 = math::mint<math::mint_$mb1b, 469762049>;
        using mint_$m2 = math::mint<math::mint_$mb1b, 754974721>;
        using ntt_$m0_t = math::ntt<mint_$m0>;
        using ntt_$m1_t = math::ntt<mint_$m1>;
        using ntt_$m2_t = math::ntt<mint_$m2>;
        using vec_t = vec<mint>;
        auto conv_func(vec_t CR a, vec_t CR b) {
          ntt_$m0_t ntt0;
          ntt_$m1_t ntt1;
          ntt_$m2_t ntt2;
          return math::conv_3ntt(ntt0, ntt1, ntt2, a, b);
        }
    mtt:
      requirements:
      - [mints, mintd]
      include:
      - include/conv/conv_mtt.hpp
      after_include: |
        using namespace tifa_libs;
        using vec_t = vec<mint>;
        auto conv_func(vec_t CR a, vec_t CR b) {
          math::fft_r2<long double> fft;
          return math::conv_mtt(fft, a, b);
        }
conv_nttmod:
  priority: 600
  default_content:
    requirements: null
    include: null
    after_include: null
    main_begin: null
  member:
    czt_nttmod:
      requirements:
      - [poly_nttmod]
      include:
      - include/conv/conv_czt.hpp
      after_include: |
        using namespace tifa_libs;
        using vec_t = poly;
        auto conv_func(vec_t CR a, vec_t CR b) {
          return math::conv_czt(a, b);
        }
    ntt:
      requirements:
      - [mints]
      include:
      - include/conv/conv_dft.hpp
      - include/conv/ntt.hpp
      after_include: |
        using namespace tifa_libs;
        using ntt_$m_t = math::ntt<mint>;
        using vec_t = vec<mint>;
        auto conv_func(vec_t CR a, vec_t CR b) {
          ntt_$m_t ntt;
          return math::conv_dft(ntt, a, b);
        }
conv_large:
  priority: 600
  default_content:
    requirements: null
    include: null
    after_include: null
    main_begin: null
  member:
    ntt_large:
      requirements:
      - [mints]
      include:
      - include/conv/ntt.hpp
      after_include: |
        using namespace tifa_libs;
        using ntt_$m_t = math::ntt<mint>;
        using vec_t = vec<mint>;
        auto conv_func(vec_t CR a, vec_t CR b) {
          ntt_$m_t ntt;
          return math::conv_ntt_large(ntt, a, b);
        }
factorial:
  priority: 700
  default_content:
    requirements: null
    include: null
    after_include: null
    main_begin: null
  member:
    fact_helper:
      requirements:
      - [mints, mintd]
      include:
      - include/math/fact_helper.hpp
      after_include: |
        using namespace tifa_libs;
        using fact_t = math::fact_helper<mint>;
    factl_helper:
      requirements:
      - [poly_anymod, poly_nttmod]
      include:
      - include/math/factl_helper.hpp
      after_include: |
        using namespace tifa_libs;
        using fact_t = math::factl_helper<poly>;
